#include <stdio.h> // первый вариант
#include <cstdlib>
#include <iostream>
int main() {
	setlocale(LC_CTYPE, "Russian");
	FILE* f, * g, * d;
	errno_t err, err2, err3;
	err = fopen_s(&f, "fA.txt", "r"); // открываем первый файл с именем "fA.txt" для чтения
	err2 = fopen_s(&g, "fB.txt", "r"); // открываем второй файл с именем "fB.txt" для чтения
	err3 = fopen_s(&d, "fC.txt", "w"); // открываем второй файл с именем "fC.txt" для записи
	if (err != 0) // делаем проверку открытия первого файла
	{
		perror("Невозможно открыть файл\n");
		return EXIT_FAILURE;
	}
	if (err2 != 0) // делаем проверку открытия второго файла
	{
		perror("Невозможно открыть файл\n");
		return EXIT_FAILURE;
	}
	if (err3 != 0) // делаем проверку открытия третьего файла
	{
		perror("Невозможно создать файл\n");
		return EXIT_FAILURE;
	}
	int n = 1, m, n1 = 1, m1; // создаём переменные для размера первой матрицы и второй матрицы
	int** a = (int**)malloc(1 * sizeof(int*)); // выделяем память под массив массивов
	fscanf_s(f, "%d", &m); // считываем количество столбцов первой матрицы
	a[0] = (int*)malloc(m * sizeof(int)); // выделяем память под массив
	int k = 0;
	int i = 0;
	while (fscanf_s(f, "%d", &a[i][k]) != EOF) { // пока не достигли конца файла читаем число и записываем в матрицу а
		k++;
		if (k == m) {
			i++;
			n++;
			a = (int**)realloc(a, n * sizeof(int*)); // расширяем массив массивов
			a[n - 1] = (int*)malloc(m * sizeof(int)); // выделяем память под новый массив
			k = 0;
		}
	}
	n--;
	int** b = (int**)malloc(1 * sizeof(int*)); // выделяем память под массив массивов
	fscanf_s(g, "%d", &m1); // считываем количество столбцов во второй матрице
	b[0] = (int*)malloc(m1 * sizeof(int)); // выделяем память под новый массив
	k = 0;
	i = 0;
	while (fscanf_s(g, "%d", &b[i][k]) != EOF) { // пока не достигли конца файла читаем число и записываем в матрицу b
		k++;
		if (k == m1) {
			i++;
			n1++;
			b = (int**)realloc(b, n1 * sizeof(int*)); // расширяем массив массивов
			b[n1 - 1] = (int*)malloc(m1 * sizeof(int)); // выделяем память под новый массив
			k = 0;
		}
	}
	n1--;
	fclose(f); // закрываем первый файл
	fclose(g); // закрываем второй файл
	int s;
	if (m == n1) { // если количество столбцов первой матрицы = количеству строк второй матрицы, то их можно перемножать
		for (int i = 0; i < n; i++) { // поэлементно находим элементы новой матрицы порядка(n x m1)
			for (int k = 0; k < m1; k++) {
				s = 0;
				for (int j = 0; j < m; j++) {
					s = s + (a[i][j] * b[j][k]);
				}
				fprintf(d, "%d ", s); // записываем полученный элемент перемножения в файл
			}
			fprintf(d, "\n"); // делаем переход на новую строку
		}
	}
	else { // выводим сообщение, что перемножение матриц невозможно
		printf("Матрицы нельзя перемножать ");
	}
	fclose(d); // закрываем третий файл
	free(a); // освобождаем память
	free(b); // освобождаем память
}
